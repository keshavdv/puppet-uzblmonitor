#!/usr/bin/env python
import argparse
import logging
import json
import random
import re
import subprocess
from subprocess import Popen
import tempfile
import time

import i3

log = logging.getLogger("uzblmonitor")
DEFAULT_STATE = """{
        "mode": "window",
        "split": "splith",
        "percent": 1,
        "children": [
            {
                "mode": "terminal",
                "command": "echo 'Configure me.'",
                "percent": 1
            }
        ]
}"""


class Layout(object):
    # Handles window manager layout

    def __init__(self, state):
        self.state = state

    def generate_layout(self, state):
        views = []
        if len(state["children"]) == 0:
            output = json.dumps(self.transform_layout_tree(json.loads(DEFAULT_STATE), views))
        else:
            output = json.dumps(self.transform_layout_tree(state, views))
        return (output, views)

    def transform_layout_tree(self, state, views):
        if state['mode'] == 'url':
            url = URL(state['url'])
            views.append(url)
            swallow = {}
            swallow[url.get_window_mode()] = str(url.get_window_title())

            tree = {
                'type': 'con',
                "border": "pixel",
                "current_border_width": 1,
                "floating": "auto_off",
                "percent": state['percent'],
                "swallows": [swallow]
            }

        elif state['mode'] == 'terminal':
            terminal = Terminal(state['command'])
            views.append(terminal)
            swallow = {}
            swallow[terminal.get_window_mode()] = str(terminal.get_window_title())

            tree = {
                'type': 'con',
                "border": "pixel",
                "current_border_width": 1,
                "floating": "auto_off",
                "percent": state['percent'],
                "swallows": [swallow]
            }

        else:
            tree = {
                "layout": state['split'],
                "percent": state['percent'],
                "type": "con",
                'nodes': [self.transform_layout_tree(child, views) for child in state['children']]
            }

        return tree

    def write_temp_file(self, contents):
        with tempfile.NamedTemporaryFile(delete=False) as layout_config_file:
            layout_config_file.write(contents)
            layout_config_file.flush()
            return layout_config_file

    def draw(self):
        # generate new layout json from internal state and apply it
        layout, views = self.generate_layout(self.state)
        tmpfile = self.write_temp_file(layout)

        i3.msg('command', 'workspace 2')
        # kill all previous views
        for i in range(10):
            i3.msg('command', 'focus parent')
        i3.msg('command', 'kill')
        i3.msg('command', 'workspace 2')
        i3.msg('command', 'append_layout %s' % tmpfile.name)
        tmpfile.close()

        # spawn all views
        for view in views:
            view.load()


class ViewAdapter(object):

    def __init__(self):
        self.id = random.randint(1, 10000000)

    def load(self):
        pass

    def get_window_mode(self):
        pass

    def get_window_title(self):
        pass


class URL(ViewAdapter):

    """
    Jumanji browser wrapper
    """

    def __init__(self, url):
        self.pid = None
        self.url = url
        super(URL, self).__init__()

    def load(self):
        cmd = ["jumanji", "--name", self.url, self.url]
        self.pid = Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def get_window_mode(self):
        return 'instance'

    def get_window_title(self):
        return re.escape(self.url)


class Terminal(ViewAdapter):

    """
    Terminal emulator
    """

    def __init__(self, cmd):
        self.pid = None
        self.cmd = cmd
        super(Terminal, self).__init__()

    def load(self):
        cmd = ["xterm", "-title", str(self.id), "-hold", "-e", "bash", "-c", self.cmd]
        self.pid = Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def get_window_mode(self):
        return 'title'

    def get_window_title(self):
        return self.id


def main(args):
    logging.basicConfig(level=logging.DEBUG)
    with open(args.config) as f:
        l = Layout(json.loads(f.read()))
    l.draw()
    while True:
        time.sleep(1)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='uzblmonitor')
    parser.add_argument('-c', '--config', default='uzblmonitor-state.json', help='state config file')

    args = parser.parse_args()
    main(args)
